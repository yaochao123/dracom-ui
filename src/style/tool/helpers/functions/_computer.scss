/// 将字符串转换成数字
///
/// @name number
/// @group 数字计算
/// @param {String} $string 数字字符串
/// @example SCSS
///     number('2') => 2

@function number($string) {
  // Matrices
  $strings: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $numbers: 0 1 2 3 4 5 6 7 8 9;

  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);
    @if $character == "-" {
      $minus: true;
    } @else if $character == "." {
      $divider: 1;
    } @else {
      @if not $index {
        $result: if($minus, $result * -1, $result);
        @return unit-length($result, str-slice($string, $i));
      }
      $number: nth($numbers, $index);
      @if $divider == 0 {
        $result: $result * 10;
      } @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }
      $result: $result + $number;
    }
  }
  @return if($minus, $result * -1, $result);
}

/// 字符串 replace 方法，用于在字符串中用一些字符替换另一些字符
///
/// @name str-replace
/// @group 数字计算
/// @param {String} $string - 需要进行查找的字符串
/// @param {String} $search - 规定需要被替换的子字符串
/// @param {String} $replace [''] - 替换文本
/// @example
///   str-replace("QMUI Web", "Web") => "QMUI"
///   str-replace("QMUI Web", "Web", "iOS") => "QMUI iOS"
///   str-replace("QMUI Web", "Web", "Android") => "QMUI Android"
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/// 获取数值的n次幂的值
///
/// @name pow
/// @group 数字计算
/// @param {Number} $number - 底数
/// @param {Number} $pow - 幂数
/// @example
///   pow(10, 5) => 100000
///   pow(10, -1) => 0.1
@function pow($number, $pow) {
  $result: 1;
  @if $pow > 0 {
    @for $i from 1 through $pow {
      $result: $result * $number;
    }
  } @else if $pow < 0 {
    @for $i from $pow to 0 {
      $result: $result / $number;
    }
  }
  @return $result;
}

/// 获取数值的开平方值
///
/// @name sqrt
/// @group 数字计算
/// @param {Number} $number - 待开平方的数值
/// @example
///   sqrt(2) => 1.414214
@function sqrt($num) {
  $temp: 1;
  @while abs($temp - $num / $temp) > 1e-6 {
    $temp: ($temp + $num/$temp) / 2;
  }
  @return $temp;
}

/// 数字四舍五入
///
/// @name toFixed
/// @group 数字计算
/// @param {Number} $number - 待格式化的数值
/// @param {Number} $digits [0] - 精确度(精确到小数点后几位)
/// @param {String} $type [round] - 格式化方式( `round` | `floor` | `ceil` )
/// @example
///   toFixed(3.1415926535898) => 3.14
///   toFixed(3.1415926535898, 4, floor) => 3.1415
///   toFixed(3.1415926535898, 4, ceil) => 3.1416
///   toFixed(-3.1415926535898, 4, floor) => -3.1416
///   toFixed(-3.1415926535898, 4, ceil) => -3.1415
///   toFixed(3.1415926535898px) => 3.14px
@function toFixed($number, $digits: 0, $type: round) {
  $result: null;
  @if $type == round {
    $result: round($number * pow(10, $digits)) / pow(10, $digits);
  } @else if $type == floor {
    $result: floor($number * pow(10, $digits)) / pow(10, $digits);
  } @else if $type == ceil {
    $result: ceil($number * pow(10, $digits)) / pow(10, $digits);
  } @else {
    @warn "type参数输入有误,请选择输入'round'、'floor'、'ceil'其中一个";
    $result: $number;
  }
  @return $result;
}

/// 阶乘计算
///
/// @name factorial
/// @group 数字计算
/// @param {Number} $number - 待进行阶乘计算的数值
/// @example
///   factorial(4) => 4 * 3 * 2 * 1 => 24
@function factorial($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

/// 获取 π 的值（11位小数精度）
///
/// @name pi
/// @group 数字计算

@function pi() {
  @return 3.14159265359;
}

/// 通过角度计算弧度
///
/// @name rad
/// @group 数字计算
/// @param {Number} $angle - 需要被转换为弧度的角度值
/// @example
///   rad(180deg) -> 3.14159
///   rad(45deg) -> 0.7854
@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

/// 计算 sin 三角函数
///
/// @name sin
/// @group 数字计算
/// @param {Number} $angle - 需要进行 sin 计算的角度值
/// @example
///   sin(45deg) -> 0.70711
///   sin(90deg) -> 1
@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / factorial(2 * $i + 1);
  }
  @return $sin;
}

/// 计算 cos 三角函数
///
/// @name cos
/// @group 数字计算
/// @param {Number} $angle - 需要进行 cos 计算的角度值
/// @example
///   cos(45deg) -> 0.70711
///   cos(90deg) -> 0
@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / factorial(2 * $i);
  }
  @return $cos;
}

/// 计算 tan 三角函数
///
/// @name tan
/// @group 数字计算
/// @param {String} $angle - 需要进行 tan 计算的角度值
/// @example
///   tan(45deg) -> 1
///   tan(50deg) -> 1.19175
@function tan($angle) {
  @return sin($angle) / cos($angle);
}
